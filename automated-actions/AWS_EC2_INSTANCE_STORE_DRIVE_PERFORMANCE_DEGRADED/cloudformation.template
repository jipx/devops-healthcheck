{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Automatically stop or terminate EC2 instances that have a specific tag and degraded instance-store performance using Amazon Cloudwatch events and AWS Lambda",
    "Metadata": {
        "LICENSE": "Copyright 2016 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. This file is licensed to you under the AWS Customer Agreement (the \"License\"). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/agreement/ . This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and limitations under the License.",
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "General Configuration"
                    },
                    "Parameters": [
                        "Action",
                        "TagKey",
                        "TagValue",
                        "DryRun"
                    ]
                }
            ],
            "ParameterLabels": {
                "Action": {
                    "default": "Action to take"
                },
                "TagKey": {
                    "default": "Tag Key"
                },
                "TagValue": {
                    "default": "Tag Value"
                },
                "DryRun": {
                    "default": "Dry Run"
                }
            }
        }
    },
    "Parameters": {
        "Action": {
            "Description": "Action to take when Instance Storage is degraded",
            "Type": "String",
            "Default": "Stop",
            "AllowedValues": [
                "Stop",
                "Terminate"
            ]
        },
        "TagKey": {
            "Description": "Tag key to match on ec2 instances",
            "Type": "String",
            "Default": "stage"
        },
        "TagValue": {
            "Description": "Tag value to match on ec2 instances",
            "Type": "String",
            "Default": "dev"
        },
        "DryRun": {
            "Description": "Set to true to test function without actually taking action on affected instances",
            "Type": "String",
            "Default": "true"
        }
    },
    "Resources": {
        "LambdaIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AADriveDegraded",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "LambdaLogging",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                },
                                {
                                    "Sid": {
                                        "Fn::Sub": "EC2${Action}Instances"
                                    },
                                    "Action": [
                                        {
                                            "Fn::Sub": "ec2:${Action}Instances"
                                        }
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "// Sample Lambda Function to stop EC2 instances when AWS Health AWS_EC2_INSTANCE_STORE_DRIVE_PERFORMANCE_DEGRADED events are generated. This is useful for situations where there is data redundancy and automated launch of instnaces (e.g. via Autoscaling).",
                                "var AWS = require('aws-sdk');",
                                "",
                                "// define configuration",
                                "const tagKey = process.env.TAG_KEY;",
                                "const tagValue = process.env.TAG_VALUE;",
                                "const action = process.env.EC2_ACTION;",
                                "const dryRun = process.env.DRY_RUN;",
                                "",
                                "function getMatchingInstances(affectedEntities){",
                                "    //initialize an empty array",
                                "    var instances = [];",
                                "    // loop through entities",
                                "    for ( var i=0; i < affectedEntities.length; i+=1 )",
                                "    {",
                                "        var instanceId = affectedEntities[i].entityValue;",
                                "        // check that tags match",
                                "        if (affectedEntities[i].tags[[tagKey]] == tagValue){",
                                "            // add instanceid to the array",
                                "            instances.push(instanceId);",
                                "        }",
                                "        else console.log ('The following instance does not match the configured tag: ', instanceId);",
                                "    }",
                                "    return instances",
                                "}",
                                "",
                                "function setupClient(region){",
                                "    // set the region for the sdk",
                                "    AWS.config.update({region: region});",
                                "    //create the ec2 client",
                                "    return new AWS.EC2();",
                                "}",
                                "",
                                "function getParams(instances, dryRun){",
                                "    // setup parameters",
                                "    var instancesParams = {",
                                "        InstanceIds: instances,",
                                "        DryRun: false",
                                "    };",
                                "    // enable DryRun if set in environment variables",
                                "    if (dryRun == 'true')  {",
                                "        instancesParams.DryRun = true;",
                                "        console.log()",
                                "    }",
                                "    return instancesParams",
                                "}",
                                "",
                                "//main function which gets AWS Health data from Cloudwatch event",
                                "exports.handler = (event, context, callback) => {",
                                "",
                                "    // function to handle ec2 API response",
                                "    function handleResponse(err, data) {",
                                "        if (err) {                                                          // an error occurred",
                                "            if (err.code == 'DryRunOperation') {",
                                "                console.log(instances, region, err.message);",
                                "                callback(null, awsHealthSuccessMessage);",
                                "            } else {",
                                "                console.log(instances, region, err, err.stack);",
                                "                throw err;",
                                "            }",
                                "",
                                "        } else {",
                                "            console.log(`Instance ${action}: `, instances, region);",
                                "            //return success",
                                "            callback(null, awsHealthSuccessMessage);",
                                "        }                                                                   // successful response",
                                "    }",
                                "",
                                "    //extract details from Cloudwatch event",
                                "    var eventName = event.detail.eventTypeCode;",
                                "    var affectedEntities = event.detail.affectedEntities;",
                                "    var region = event.region;",
                                "",
                                "    const awsHealthSuccessMessage = `Successfully got details from AWS Health event, ${eventName} and executed automated action.`;",
                                "",
                                "    // get affected instances that match the required tags",
                                "    instances = getMatchingInstances(affectedEntities);",
                                "",
                                "    if (instances.length > 0) {                           //there are some instances to take action on",
                                "",
                                "        //create an ec2 api client in the event's region",
                                "        var ec2 = setupClient(region);",
                                "",
                                "        // setup parameters",
                                "        var instancesParams = getParams(instances, dryRun);",
                                "",
                                "        console.log (`attempting to ${action} the following instances: `, instances);",
                                "        // Call either the Terminate or the Stop API",
                                "        if (action == 'Terminate') ec2.terminateInstances(instancesParams, handleResponse);",
                                "        else ec2.stopInstances(instancesParams, handleResponse);",
                                "",
                                "    } else {",
                                "        console.log('No instances in the event match the required tags, exiting without any action');",
                                "        callback(null, awsHealthSuccessMessage);",
                                "    }",
                                "",
                                "};",
                                ""
                            ]
                        ]
                    }
                },
                "Description": "stop or terminate EC2 instances that have a specific tag in response to AWS health events",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIAMRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 120,
                "Environment": {
                    "Variables": {
                        "DRY_RUN": {
                            "Ref": "DryRun"
                        },
                        "EC2_ACTION": {
                            "Ref": "Action"
                        },
                        "TAG_KEY": {
                            "Ref": "TagKey"
                        },
                        "TAG_VALUE": {
                            "Ref": "TagValue"
                        }
                    }
                }
            },
            "Type": "AWS::Lambda::Function"
        },
        "LambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunction",
                        "Arn"
                    ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "CloudWatchEventRule",
                        "Arn"
                    ]
                }
            }
        },
        "CloudWatchEventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "AWS_EC2_INSTANCE_STORE_DRIVE_PERFORMANCE_DEGRADED",
                "EventPattern": {
                    "source": [
                        "aws.health"
                    ],
                    "detail-type": [
                        "AWS Health Event"
                    ],
                    "detail": {
                        "service": [
                            "EC2"
                        ],
                        "eventTypeCategory": [
                            "issue"
                        ],
                        "eventTypeCode": [
                            "AWS_EC2_INSTANCE_STORE_DRIVE_PERFORMANCE_DEGRADED"
                        ]
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "LambdaFunction",
                                "Arn"
                            ]
                        },
                        "Id": "InstanceStoreDegradedFunction"
                    }
                ]
            }
        }
    }
}
